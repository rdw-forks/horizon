name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  MYSQL_PASSWORD: horizon
  MYSQL_USERNAME: horizon
  MYSQL_DATABASE: horizon
  MYSQL_HOSTNAME: "15.235.163.198"
  LINUX_BOOST_ROOT: "/home/debian/boost_1_85_0"
  LINUX_BOOST_LIBRARYDIR: "/home/debian/boost_1_85_0/stage/lib"
  WINDOWS_PARALLEL: "12"
  LINUX_PARALLEL: "8"
jobs:
  Debian-GCC-Tests-Tools-SAN:
    strategy:
      matrix:
        sanitizer: [ "-DWITH_ASAN=true", "-DWITH_TSAN=true", "-DWITH_LSAN=true" ]
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure & Build
      run: |
        cmake -B"${{github.workspace}}/build" -S"${{github.workspace}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" -DWITH_TESTS=true -DWITH_TOOLS=true -DWITHOUT_SERVERS=true -DBOOST_ROOT=${{env.LINUX_BOOST_ROOT}} -DBOOST_LIBRARYDIR=${{env.LINUX_BOOST_LIBRARYDIR}} ${{matrix.sanitizer}}
        cmake --build ${{github.workspace}}/build --config Debug
        cmake --build ${{github.workspace}}/build --target install --config Debug --parallel ${{env.LINUX_PARALLEL}}
    - name: Run
      run: |
        cp ${{github.workspace}}/config ${{github.workspace}}/build/bin/config -r
        cp ${{github.workspace}}/db ${{github.workspace}}/build/bin/db -r
        cp ${{github.workspace}}/scripts ${{github.workspace}}/build/bin/scripts -r
        files=$(find ${{github.workspace}}/src/Tests -type f -iname "*Test.cpp");
        for f in ${files[@]};
        do
          t=$(basename ${f::-4});
          ${{github.workspace}}/build/bin/${t};
        done
  
  Debian-GCC-Tests-Tools:
    strategy:
      matrix:
        build_type: [ "Debug", "RelWithDebInfo", "Release" ]
    needs: Debian-GCC-Tests-Tools-SAN
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure & Build
      run: |
        cmake -B"${{github.workspace}}/build" -S"${{github.workspace}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" -DWITH_TESTS=true -DWITH_TOOLS=true -DWITHOUT_SERVERS=true -DBOOST_ROOT=${{env.LINUX_BOOST_ROOT}} -DBOOST_LIBRARYDIR=${{env.LINUX_BOOST_LIBRARYDIR}}
        cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel ${{env.LINUX_PARALLEL}}
        cmake --build ${{github.workspace}}/build --target install --config ${{matrix.build_type}}
    - name: Run
      run: |
        cp ${{github.workspace}}/config ${{github.workspace}}/build/bin/config -r
        cp ${{github.workspace}}/db ${{github.workspace}}/build/bin/db -r
        cp ${{github.workspace}}/scripts ${{github.workspace}}/build/bin/scripts -r
        files=$(find ${{github.workspace}}/src/Tests -type f -iname "*Test.cpp");
        for f in ${files[@]};
        do
          t=$(basename ${f::-4});
          ${{github.workspace}}/build/bin/${t};
        done
  Debian-GCC-Servers-ASAN:
    strategy:
      matrix:
        build_type: [ "Debug", "RelWithDebInfo", "Release" ]
    needs: Debian-GCC-Tests-Tools
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure & Build
      run: |
        cmake -B"${{github.workspace}}/build" -S"${{github.workspace}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" -DWITH_TESTS=true -DWITH_TOOLS=true -DWITH_ASAN=true -DBOOST_ROOT=${{env.LINUX_BOOST_ROOT}} -DBOOST_LIBRARYDIR=${{env.LINUX_BOOST_LIBRARYDIR}}
        cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel ${{env.LINUX_PARALLEL}}
        cmake --build ${{github.workspace}}/build --target install --config ${{matrix.build_type}}
      # Run the servers with ASAN enabled, not under gdb because LeakSanitizer doesn't run under gdb.
      # ==28178==HINT: LeakSanitizer does not work under ptrace (strace, gdb, etc)
    - name: Run
      run: |
        cp ${{github.workspace}}/config ${{github.workspace}}/build/bin/${{matrix.build_type}}/config -r
        cp ${{github.workspace}}/db ${{github.workspace}}/build/bin/${{matrix.build_type}}/db -r
        cp ${{github.workspace}}/scripts ${{github.workspace}}/build/bin/${{matrix.build_type}}/scripts -r
        cd ${{github.workspace}}/build/bin/${{matrix.build_type}}
        ./auth --with-config="config/auth-server.lua.dist" --test-run
        ./char --with-config="config/char-server.lua.dist" --test-run
        ./zone --with-config="config/zone-server.lua.dist" --test-run
  Debian-GCC-Servers-TSAN:
    strategy:
      matrix:
        build_type: [ "Debug", "RelWithDebInfo", "Release" ]
    needs: Debian-GCC-Tests-Tools
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure & Build
      run: |
        cmake -B"${{github.workspace}}/build" -S"${{github.workspace}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" -DWITH_TESTS=true -DWITH_TOOLS=true -DWITH_TSAN=true -DBOOST_ROOT=${{env.LINUX_BOOST_ROOT}} -DBOOST_LIBRARYDIR=${{env.LINUX_BOOST_LIBRARYDIR}}
        cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel ${{env.LINUX_PARALLEL}}
        cmake --build ${{github.workspace}}/build --target install --config ${{matrix.build_type}}
    - name: Run
      run: |
        cp ${{github.workspace}}/config ${{github.workspace}}/build/bin/${{matrix.build_type}}/config -r
        cp ${{github.workspace}}/db ${{github.workspace}}/build/bin/${{matrix.build_type}}/db -r
        cp ${{github.workspace}}/scripts ${{github.workspace}}/build/bin/${{matrix.build_type}}/scripts -r
        cd ${{github.workspace}}/build/bin/${{matrix.build_type}}
        ./auth --with-config="config/auth-server.lua.dist" --test-run
        ./char --with-config="config/char-server.lua.dist" --test-run
        ./zone --with-config="config/zone-server.lua.dist" --test-run
  Debian-GCC-Servers-LSAN:
    strategy:
      matrix:
        build_type: [ "Debug", "RelWithDebInfo", "Release" ]
    needs: Debian-GCC-Tests-Tools
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure & Build
      run: |
        cmake -B"${{github.workspace}}/build" -S"${{github.workspace}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" -DWITH_TESTS=true -DWITH_TOOLS=true -DWITH_LSAN=true -DBOOST_ROOT=${{env.LINUX_BOOST_ROOT}} -DBOOST_LIBRARYDIR=${{env.LINUX_BOOST_LIBRARYDIR}}
        cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel ${{env.LINUX_PARALLEL}}
        cmake --build ${{github.workspace}}/build --target install --config ${{matrix.build_type}}
    - name: Run
      run: |
        cp ${{github.workspace}}/config ${{github.workspace}}/build/bin/${{matrix.build_type}}/config -r
        cp ${{github.workspace}}/db ${{github.workspace}}/build/bin/${{matrix.build_type}}/db -r
        cp ${{github.workspace}}/scripts ${{github.workspace}}/build/bin/${{matrix.build_type}}/scripts -r
        cd ${{github.workspace}}/build/bin/${{matrix.build_type}}
        ./auth --with-config="config/auth-server.lua.dist" --test-run
        ./char --with-config="config/char-server.lua.dist" --test-run
        ./zone --with-config="config/zone-server.lua.dist" --test-run
  Debian-GCC-Servers:
    strategy:
      matrix:
        build_type: [ "Debug", "RelWithDebInfo", "Release" ]
    needs: [ Debian-GCC-Servers-TSAN, Debian-GCC-Servers-ASAN, Debian-GCC-Servers-LSAN ]
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure & Build
      run: |
        cmake -B"${{github.workspace}}/build" -S"${{github.workspace}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" -DBOOST_ROOT=${{env.LINUX_BOOST_ROOT}} -DBOOST_LIBRARYDIR=${{env.LINUX_BOOST_LIBRARYDIR}}
        cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel ${{env.LINUX_PARALLEL}}
        cmake --build ${{github.workspace}}/build --target install --config ${{matrix.build_type}}
    - name: Run
      run: |
        cp ${{github.workspace}}/config ${{github.workspace}}/build/bin/${{matrix.build_type}}/config -r
        cp ${{github.workspace}}/db ${{github.workspace}}/build/bin/${{matrix.build_type}}/db -r
        cp ${{github.workspace}}/scripts ${{github.workspace}}/build/bin/${{matrix.build_type}}/scripts -r
        cd ${{github.workspace}}/build/bin/${{matrix.build_type}}
        ./auth --with-config="config/auth-server.lua.dist" --test-run
        ./char --with-config="config/char-server.lua.dist" --test-run
        ./zone --with-config="config/zone-server.lua.dist" --test-run
  Debian-Clang-Tests-Tools-SAN:
    strategy:
      matrix:
        sanitizer: [ "-DWITH_ASAN=true", "-DWITH_TSAN=true", "-DWITH_LSAN=true" ]
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure & Build
      run: |
        cmake -B"${{github.workspace}}/build" -S"${{github.workspace}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DWITH_TESTS=true -DWITH_TOOLS=true -DWITHOUT_SERVERS=true -DBOOST_ROOT=${{env.LINUX_BOOST_ROOT}} -DBOOST_LIBRARYDIR=${{env.LINUX_BOOST_LIBRARYDIR}} ${{matrix.sanitizer}}
        cmake --build ${{github.workspace}}/build --config Debug --parallel ${{env.LINUX_PARALLEL}}
        cmake --build ${{github.workspace}}/build --target install --config Debug
    - name: Run
      run: |
        cp ${{github.workspace}}/config ${{github.workspace}}/build/bin/config -r
        cp ${{github.workspace}}/db ${{github.workspace}}/build/bin/db -r
        cp ${{github.workspace}}/scripts ${{github.workspace}}/build/bin/scripts -r
        files=$(find ${{github.workspace}}/src/Tests -type f -iname "*Test.cpp");
        for f in ${files[@]};
        do
          t=$(basename ${f::-4});
          ${{github.workspace}}/build/bin/${t}
        done
  Debian-Clang-Tests-Tools:
    strategy:
      matrix:
        build_type: [ "Debug", "RelWithDebInfo", "Release" ]
    needs: Debian-Clang-Tests-Tools-SAN
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure & Build
      run: |
        cmake -B"${{github.workspace}}/build" -S"${{github.workspace}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DWITH_TESTS=true -DWITH_TOOLS=true -DWITHOUT_SERVERS=true -DBOOST_ROOT=${{env.LINUX_BOOST_ROOT}} -DBOOST_LIBRARYDIR=${{env.LINUX_BOOST_LIBRARYDIR}}
        cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel ${{env.LINUX_PARALLEL}}
        cmake --build ${{github.workspace}}/build --target install --config ${{matrix.build_type}}
    - name: Run
      run: |
        cp ${{github.workspace}}/config ${{github.workspace}}/build/bin/config -r
        cp ${{github.workspace}}/db ${{github.workspace}}/build/bin/db -r
        cp ${{github.workspace}}/scripts ${{github.workspace}}/build/bin/scripts -r
        files=$(find ${{github.workspace}}/src/Tests -type f -iname "*Test.cpp");
        for f in ${files[@]};
        do
          t=$(basename ${f::-4});
          ${{github.workspace}}/build/bin/${t}
        done
  Debian-Clang-Servers-ASAN:
    strategy:
      matrix:
        build_type: [ "Debug", "RelWithDebInfo", "Release" ]
    needs: Debian-Clang-Tests-Tools
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure & Build
      run: |
        cmake -B"${{github.workspace}}/build" -S"${{github.workspace}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DWITH_TESTS=false -DWITH_ASAN=true -DBOOST_ROOT=${{env.LINUX_BOOST_ROOT}} -DBOOST_LIBRARYDIR=${{env.LINUX_BOOST_LIBRARYDIR}}
        cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel ${{env.LINUX_PARALLEL}}
        cmake --build ${{github.workspace}}/build --target install --config ${{matrix.build_type}}
      # Run the servers with ASAN enabled, not under gdb because LeakSanitizer doesn't run under gdb.
      # ==28178==HINT: LeakSanitizer does not work under ptrace (strace, gdb, etc)
    - name: Run
      run: |
        cp ${{github.workspace}}/config ${{github.workspace}}/build/bin/${{matrix.build_type}}/config -r
        cp ${{github.workspace}}/db ${{github.workspace}}/build/bin/${{matrix.build_type}}/db -r
        cp ${{github.workspace}}/scripts ${{github.workspace}}/build/bin/${{matrix.build_type}}/scripts -r
        cd ${{github.workspace}}/build/bin/${{matrix.build_type}}
        ./auth --with-config="config/auth-server.lua.dist" --test-run
        ./char --with-config="config/char-server.lua.dist" --test-run
        ./zone --with-config="config/zone-server.lua.dist" --test-run
  Debian-Clang-Servers-TSAN:
    strategy:
      matrix:
        build_type: [ "Debug", "RelWithDebInfo", "Release" ]
    needs: Debian-Clang-Tests-Tools
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure & Build
      run: |
        cmake -B"${{github.workspace}}/build" -S"${{github.workspace}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DWITH_TSAN=true -DBOOST_ROOT=${{env.LINUX_BOOST_ROOT}} -DBOOST_LIBRARYDIR=${{env.LINUX_BOOST_LIBRARYDIR}}
        cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel ${{env.LINUX_PARALLEL}}
        cmake --build ${{github.workspace}}/build --target install --config ${{matrix.build_type}}
    - name: Run
      run: |
        cp ${{github.workspace}}/config ${{github.workspace}}/build/bin/${{matrix.build_type}}/config -r
        cp ${{github.workspace}}/db ${{github.workspace}}/build/bin/${{matrix.build_type}}/db -r
        cp ${{github.workspace}}/scripts ${{github.workspace}}/build/bin/${{matrix.build_type}}/scripts -r
        cd ${{github.workspace}}/build/bin/${{matrix.build_type}}
        ./auth --with-config="config/auth-server.lua.dist" --test-run
        ./char --with-config="config/char-server.lua.dist" --test-run
        ./zone --with-config="config/zone-server.lua.dist" --test-run
  Debian-Clang-Servers-LSAN:
    strategy:
      matrix:
        build_type: [ "Debug", "RelWithDebInfo", "Release" ]
    needs: Debian-Clang-Tests-Tools
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure & Build
      run: |
        cmake -B"${{github.workspace}}/build" -S"${{github.workspace}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DWITH_LSAN=true -DBOOST_ROOT=${{env.LINUX_BOOST_ROOT}} -DBOOST_LIBRARYDIR=${{env.LINUX_BOOST_LIBRARYDIR}}
        cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel ${{env.LINUX_PARALLEL}}
        cmake --build ${{github.workspace}}/build --target install --config ${{matrix.build_type}}
    - name: Run
      run: |
        cp ${{github.workspace}}/config ${{github.workspace}}/build/bin/${{matrix.build_type}}/config -r
        cp ${{github.workspace}}/db ${{github.workspace}}/build/bin/${{matrix.build_type}}/db -r
        cp ${{github.workspace}}/scripts ${{github.workspace}}/build/bin/${{matrix.build_type}}/scripts -r
        cd ${{github.workspace}}/build/bin/${{matrix.build_type}}
        ./auth --with-config="config/auth-server.lua.dist" --test-run
        ./char --with-config="config/char-server.lua.dist" --test-run
        ./zone --with-config="config/zone-server.lua.dist" --test-run
  Debian-Clang-Servers:
    strategy:
      matrix:
        build_type: [ "Debug", "RelWithDebInfo", "Release" ]
    needs: [ Debian-Clang-Servers-ASAN, Debian-Clang-Servers-TSAN, Debian-Clang-Servers-LSAN ]
    runs-on: Debian
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure & Build
      run: |
        cmake -B"${{github.workspace}}/build" -S"${{github.workspace}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DBOOST_ROOT=${{env.LINUX_BOOST_ROOT}} -DBOOST_LIBRARYDIR=${{env.LINUX_BOOST_LIBRARYDIR}}
        cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel ${{env.LINUX_PARALLEL}}
        cmake --build ${{github.workspace}}/build --target install --config ${{matrix.build_type}}
    - name: Run
      run: |
        cp ${{github.workspace}}/config ${{github.workspace}}/build/bin/${{matrix.build_type}}/config -r
        cp ${{github.workspace}}/db ${{github.workspace}}/build/bin/${{matrix.build_type}}/db -r
        cp ${{github.workspace}}/scripts ${{github.workspace}}/build/bin/${{matrix.build_type}}/scripts -r
        cd ${{github.workspace}}/build/bin/${{matrix.build_type}}
        ./auth --with-config="config/auth-server.lua.dist" --test-run
        ./char --with-config="config/char-server.lua.dist" --test-run
        ./zone --with-config="config/zone-server.lua.dist" --test-run

  Windows-Tests:
    strategy:
      matrix:
        build_type: [ "Debug", "RelWithDebInfo", "Release" ]
    runs-on: Windows
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Build
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DWITHOUT_SERVERS=1 -DWITH_TESTS=1 -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows-static
        cmake --build build --config ${{matrix.build_type}} --parallel ${{env.WINDOWS_PARALLEL}}
    - name: Run
      run: |
        Xcopy /E /I ${{github.workspace}}\config ${{github.workspace}}\build\bin\${{matrix.build_type}}\config
        Xcopy /E /I ${{github.workspace}}\db ${{github.workspace}}\build\bin\${{matrix.build_type}}\db
        Xcopy /E /I ${{github.workspace}}\scripts ${{github.workspace}}\build\bin\${{matrix.build_type}}\scripts
        $files = Get-ChildItem -Path "${{github.workspace}}/src/Tests" -Filter "*Test.cpp" -Recurse
        foreach ($file in $files) {
          $t = [System.IO.Path]::GetFileNameWithoutExtension($file.FullName)
          & "${{github.workspace}}\build\bin\${{matrix.build_type}}\$t"
        }
      
  Windows-Tools:
    strategy:
      matrix:
        build_type: [ "Debug", "RelWithDebInfo", "Release" ]
    needs: Windows-Tests
    runs-on: Windows
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Build
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DWITHOUT_SERVERS=1 -DWITH_TOOLS=1 -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows-static
        cmake --build build --config ${{matrix.build_type}} --parallel ${{env.WINDOWS_PARALLEL}}

  Windows-Servers:
    strategy:
      matrix:
        build_type: [ "Debug", "RelWithDebInfo", "Release" ]
    needs: [ Windows-Tests, Windows-Tools ]
    runs-on: Windows
    steps:
    - name: Checkout
      uses: actions/checkout@v4
   
    - name: Configure Step & Build
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows-static
        cmake --build build --config ${{matrix.build_type}} --parallel ${{env.WINDOWS_PARALLEL}}
        Xcopy /E /I ${{github.workspace}}\config ${{github.workspace}}\build\bin\${{matrix.build_type}}\config
        Xcopy /E /I ${{github.workspace}}\db ${{github.workspace}}\build\bin\${{matrix.build_type}}\db
        Xcopy /E /I ${{github.workspace}}\scripts ${{github.workspace}}\build\bin\${{matrix.build_type}}\scripts
    - name: Run
      working-directory: ${{github.workspace}}\build\bin\${{matrix.build_type}}
      run: |
        ${{github.workspace}}\build\bin\${{matrix.build_type}}\auth.exe --with-config="${{github.workspace}}\build\bin\${{matrix.build_type}}\config\auth-server.lua.dist" --test-run 
        ${{github.workspace}}\build\bin\${{matrix.build_type}}\char.exe --with-config="${{github.workspace}}\build\bin\${{matrix.build_type}}\config\char-server.lua.dist" --test-run
        ${{github.workspace}}\build\bin\${{matrix.build_type}}\zone.exe --with-config="${{github.workspace}}\build\bin\${{matrix.build_type}}\config\zone-server.lua.dist" --test-run